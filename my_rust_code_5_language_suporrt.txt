use std::collections::HashMap;
use std::i32;
use std::io;
fn main() {
    let mut _loop_value = String::new(); //asking user input in string format
    let mut amount = String::new(); //user input for currecny amount
                                //let mut op = " ".to_string();
    println!("Enter the Currency amount:");
    io::stdin()
        .read_line(&mut amount)
        .expect("Failed to read line"); //user input
    let intamount: f64 = amount
        .trim()
        .parse()
        .ok()
        .expect("Program only process numbers,Enter number"); //converting string input to integer
    let amount = intamount as i32; //integer currency
    let _diff: f64 = intamount - f64::from(amount);
    let _fn: f64 = _diff * f64::from(100); //decimal value converted to integer by multiplying 100 to it
    let _int_fn = _fn.round(); // rounding the decimal equivalent
    let mut _dec = String::new(); //asking user input in string format
    println!("Enter 1 for english 2 for hindi 3 for marathti 4 for bengali and 5 for gujrati");
    io::stdin()
        .read_line(&mut _dec)
        .expect("Failed to read line"); //user input
    let mydecision: i32 = _dec
        .trim()
        .parse()
        .ok()
        .expect("Program only process numbers,Enter number"); //converting string input to integer
    let _dec = mydecision as i32; //integer currency
    match mydecision {
        1 => {
            if amount < 100 {
                println!("{}", hashmap_english2(amount));
            } else {
                println!("{}", hashmap_english3(amount));
            }
        }
        2 => println!("{}", hashmap_hindi2(amount)),
        3 => println!("{}", hashmap_marathi2(amount)),
        4 => println!("{}", hashmap_bengali2(amount)),
        5 => println!("{}", hashmap_gujrati2(amount)),
        _ => println!("enter a valid input"),
    };
    if _int_fn != 0.0 {
        println!("{}/100", _int_fn);
    } else {
        println!("");
    }
}
fn lenght(mut a2: i32) -> i32 {
    let mut len: i32 = 0;
    while a2 != 0 {
        len = len + 1;
        a2 = a2 / 10;
    }
    len
}

fn hashmap_english(a: i32) -> String {
    let mut text: HashMap<i32, &str> = HashMap::new();
    text.insert(0, "");
    text.insert(1, "One ");
    text.insert(2, "two ");
    text.insert(3, "three ");
    text.insert(4, "four ");
    text.insert(5, "five ");
    text.insert(6, "six ");
    text.insert(7, "seven ");
    text.insert(8, "eight ");
    text.insert(9, "nine ");
    text.insert(10, "ten ");
    text.insert(11, "eleven ");
    text.insert(12, "twelve ");
    text.insert(13, "thirteen ");
    text.insert(14, "fourteen ");
    text.insert(15, "fifteen ");
    text.insert(16, "sixteen ");
    text.insert(17, "seventeen ");
    text.insert(18, "eighteen ");
    text.insert(19, "nineteen ");
    text.insert(20, "twenty ");
    text.insert(30, "thirty ");
    text.insert(40, "fourty ");
    text.insert(50, "fifty ");
    text.insert(60, "sixty ");
    text.insert(70, "seventy ");
    text.insert(80, "eighty ");
    text.insert(90, "ninety ");
    let mut stri = String::new();
    stri.push_str(text.get(&a).unwrap());
    return stri;
}
fn hashmap_english2(a: i32) -> String {
    let mut output = String::new();
    let x: i32 = a % 100;
    if x > 0 && x <= 20 {
        output.push_str(&hashmap_english(x));
    } else {
        let y: i32 = x - (x % 10);
        let m: i32 = x % 10;
        output.push_str(&hashmap_english(y));
        output.push_str(&hashmap_english(m));
    }
    output
}
fn hashmap_english3(a: i32) -> String {
    let mut output = String::new();
    let mut len = lenght(a);

    while len >= 3 {
        if len > 9 {
            output.push_str("No out of range ");
            len = 0;
        }
        if len == 8 || len == 9 {
            output.push_str(&hashmap_english2(a / 10000000));
            if (a % 1000000000) / 100000000 != 0 || (a % 100000000) / 10000000 != 0 {
                output.push_str("crore ");
            }
            len = 7;
        }
        if len == 6 || len == 7 {
            output.push_str(&hashmap_english2(a / 100000));
            if (a % 10000000) / 1000000 != 0 || (a % 1000000) / 100000 != 0 {
                output.push_str("lakh ");
            }
            len = 5;
        }
        if len == 5 || len == 4 {
            output.push_str(&hashmap_english2(a / 1000));
            if (a % 100000) / 10000 != 0 || (a % 10000) / 1000 != 0 {
                output.push_str("thousand ");
            }
            len = 3;
        }
        if len == 3 {
            output.push_str(&hashmap_english2((a % 1000) / 100));
            if (a % 1000) / 100 != 0 {
                output.push_str("hundred ");
            }
            output.push_str(&hashmap_english2(a % 100));
            len = len - 1;
        }
    }
    output
}
fn hashmap_marathi(a: i32) -> String {
    let mut text: HashMap<i32, &str> = HashMap::new();
    text.insert(0, "");
    text.insert(1, "एक ");
    text.insert(2, "दोन ");
    text.insert(3, "तीन ");
    text.insert(4, "चार ");
    text.insert(5, "पाच ");
    text.insert(6, "सहा ");
    text.insert(7, "सात ");
    text.insert(8, "आठ  ");
    text.insert(9, "नऊ ");
    text.insert(10, "दहा ");
    text.insert(11, "अकरा ");
    text.insert(12, "बारा ");
    text.insert(13, "तेरा ");
    text.insert(14, "चौदा ");
    text.insert(15, "पंधरा ");
    text.insert(16, "सोळा ");
    text.insert(17, "सतरा ");
    text.insert(18, "अठरा ");
    text.insert(19, "एकोणीस ");
    text.insert(20, "वीस ");
    text.insert(21, "एकवीस ");
    text.insert(22, "बावीस ");
    text.insert(23, "तेवीस ");
    text.insert(24, "चोवीस ");
    text.insert(25, "पंचवीस ");
    text.insert(26, "सव्वीस ");
    text.insert(27, "सत्तावीस ");
    text.insert(28, "अठ्ठावीस");
    text.insert(29, "एकोणतीस");
    text.insert(30, "तीस");
    text.insert(31, "एकतीस ");
    text.insert(32, "बत्तीस ");
    text.insert(33, "तेहेतीस ");
    text.insert(34, "चौतीस ");
    text.insert(35, "पस्तीस ");
    text.insert(36, "छत्तीस ");
    text.insert(37, "सदतीस ");
    text.insert(38, "अडतीस  ");
    text.insert(39, "एकोणचाळीस ");
    text.insert(40, "चाळीस ");
    text.insert(41, "एक्केचाळीस ");
    text.insert(42, "बेचाळीस ");
    text.insert(43, "त्रेचाळीस ");
    text.insert(44, "चव्वेचाळीस ");
    text.insert(45, "पंचेचाळीस ");
    text.insert(46, "सेहेचाळीस ");
    text.insert(47, "सत्तेचाळीस ");
    text.insert(48, "अठ्ठेचाळीस ");
    text.insert(49, "एकोणपन्नास ");
    text.insert(50, "पन्नास ");
    text.insert(51, "एक्कावन्न ");
    text.insert(52, "बावन्न ");
    text.insert(53, "त्रेपन्न ");
    text.insert(54, "चोपन्न ");
    text.insert(55, "पंचावन्न ");
    text.insert(56, "छप्पन्न ");
    text.insert(57, "सत्तावन्न ");
    text.insert(58, "अठ्ठावन्न ");
    text.insert(59, "एकोणसाठ ");
    text.insert(60, "साठ ");
    text.insert(61, "एकसष्ठ ");
    text.insert(62, "बासष्ठ");
    text.insert(63, "त्रेसष्ठ ");
    text.insert(64, "चौसष्ठ ");
    text.insert(65, "पासष्ठ ");
    text.insert(66, "सहासष्ठ ");
    text.insert(67, "सदुसष्ठ ");
    text.insert(68, "अडुसष्ठ ");
    text.insert(69, "एकोणसत्तर ");
    text.insert(70, "सत्तर ");
    text.insert(71, "एक्काहत्तर ");
    text.insert(72, "बाहत्तर ");
    text.insert(73, "त्र्याहत्तर ");
    text.insert(74, "चौरयाहत्तर ");
    text.insert(75, "पंच्याहत्तर ");
    text.insert(76, "शहात्तर ");
    text.insert(77, "सत्याहत्तर ");
    text.insert(78, "अठ्ठ्याहत्तर ");
    text.insert(79, "एकोणऐंशी ");
    text.insert(80, "ऐंशी ");
    text.insert(81, "एक्क्याऐंशी ");
    text.insert(82, "ब्याऐंशी ");
    text.insert(83, "त्र्याऐंशी ");
    text.insert(84, "चौऱ्याऐंशी ");
    text.insert(85, "पंच्याऐंशी ");
    text.insert(86, "शहाऐंशी ");
    text.insert(87, "सत्त्याऐंशी ");
    text.insert(88, "अठ्ठ्याऐंशी");
    text.insert(89, "एकोणनव्वद ");
    text.insert(90, "नव्वद ");
    text.insert(91, "एक्क्याण्णव");
    text.insert(92, "ब्याण्णव");
    text.insert(93, "त्र्याण्णव");
    text.insert(94, "चौऱ्याण्णव");
    text.insert(95, "पंच्याण्णव");
    text.insert(96, "शहाण्णव");
    text.insert(97, "सत्त्याण्णव");
    text.insert(98, "अठ्ठ्याण्णव");
    text.insert(99, "नव्व्याण्णव");
    text.insert(100, "शंभर");
    let mut stri = String::new();
    stri.push_str(text.get(&a).unwrap());
    return stri;
}
fn hashmap_marathi2(a: i32) -> String {
    let mut output = String::new();
    let mut len = lenght(a);
    println!("{}", len);
    while len > 0 {
        if len > 9 {
            output.push_str("No out of range ");
            len = 0;
        }
        if len == 8 || len == 9 {
            output.push_str(&hashmap_marathi(a / 10000000));
            if (a % 1000000000) / 100000000 != 0 || (a % 100000000) / 10000000 != 0 {
                output.push_str("कोटी ");
            }
            len = 7;
        }
        if len == 6 || len == 7 {
            if (a % 1_00_00_000) / 10_00_000 != 0 || (a % 10_00_000) / 1_00_000 != 0 {
                output.push_str(&hashmap_marathi((a / 100000) - (a / 10000000) * 100));
                output.push_str("लाख ");
            }
            len = 5;
        }
        if len == 5 || len == 4 {
            if (a % 100000) / 10000 != 0 || (a % 10000) / 1000 != 0 {
                output.push_str(&hashmap_marathi((a / 1000) - (a / 100000) * 100));

                output.push_str("हजार ");
            }
            len = 3;
        }
        if len == 3 {
            if (a % 1000) / 100 != 0 {
                output.push_str(&hashmap_marathi((a % 1000) / 100));

                output.push_str("शे ");
            }
            len = 2
        }
        if len == 2 || len==1{
            output.push_str(&hashmap_marathi(a % 100));

            len = 0;
        }
    }
    output
}
fn hashmap_hindi(digits: i32) -> String {
    let mut text: HashMap<i32, &str> = HashMap::new();
    text.insert(0, " ");
    text.insert(1, "एक ");
    text.insert(2, "दो ");
    text.insert(3, "तीन ");
    text.insert(4, "चार ");
    text.insert(5, "पांच ");
    text.insert(6, "छह ");
    text.insert(7, "सात ");
    text.insert(8, "आठ  ");
    text.insert(9, "नौ ");
    text.insert(10, "दस ");
    text.insert(11, "ग्यारह ");
    text.insert(12, "बारह ");
    text.insert(13, "तेरह ");
    text.insert(14, "चौदह ");
    text.insert(15, "पंद्रह ");
    text.insert(16, "सोलह ");
    text.insert(17, "सत्रह ");
    text.insert(18, "अठारह ");
    text.insert(19, "उन्नीस ");
    text.insert(20, "बीस ");
    text.insert(21, "इकीस ");
    text.insert(22, "बाईस ");
    text.insert(23, "तेइस ");
    text.insert(24, "चौबीस ");
    text.insert(25, "पच्चीस ");
    text.insert(26, "छब्बीस ");
    text.insert(27, "सताइस ");
    text.insert(28, "अट्ठाइस");
    text.insert(29, "उनतीस");
    text.insert(30, "तीस");
    text.insert(31, "इकतीस ");
    text.insert(32, "बतीस ");
    text.insert(33, "तैंतीस ");
    text.insert(34, "चौंतीस ");
    text.insert(35, "पैंतीस ");
    text.insert(36, "छतीस ");
    text.insert(37, "सैंतीस ");
    text.insert(38, "अड़तीस  ");
    text.insert(39, "उनतालीस ");
    text.insert(40, "चालीस ");
    text.insert(41, "इकतालीस ");
    text.insert(42, "बयालीस  ");
    text.insert(43, "तैतालीस ");
    text.insert(44, "चवालीस ");
    text.insert(45, "पैंतालीस ");
    text.insert(46, "छयालिस ");
    text.insert(47, "सैंतालीस ");
    text.insert(48, "अड़तालीस ");
    text.insert(49, "उनचास ");
    text.insert(50, "पचास ");
    text.insert(51, "इक्यावन ");
    text.insert(52, "बावन ");
    text.insert(53, "तिरपन ");
    text.insert(54, "चौवन ");
    text.insert(55, "पचपन ");
    text.insert(56, "छप्पन ");
    text.insert(57, "सतावन ");
    text.insert(58, "अठावन ");
    text.insert(59, "उनसठ ");
    text.insert(60, "साठ ");
    text.insert(61, "इकसठ ");
    text.insert(62, "बासठ");
    text.insert(63, "तिरसठ ");
    text.insert(64, "चौंसठ  ");
    text.insert(65, "पैंसठ ");
    text.insert(66, "छियासठ ");
    text.insert(67, "सड़सठ ");
    text.insert(68, "अड़सठ ");
    text.insert(69, "उनहतर ");
    text.insert(70, "सत्तर ");
    text.insert(71, "इकहतर ");
    text.insert(72, "बहतर ");
    text.insert(73, "तिहतर ");
    text.insert(74, "चौहतर ");
    text.insert(75, "पचहतर ");
    text.insert(76, "छिहतर ");
    text.insert(77, "सतहतर ");
    text.insert(78, "अठहतर ");
    text.insert(79, "उन्नासी ");
    text.insert(80, "अस्सी   ");
    text.insert(81, "इक्यासी ");
    text.insert(82, "बयासी ");
    text.insert(83, "तिरासी ");
    text.insert(84, "चौरासी ");
    text.insert(85, "पचासी ");
    text.insert(86, "छियासी ");
    text.insert(87, "सतासी ");
    text.insert(88, "अट्ठासी");
    text.insert(89, "नवासी ");
    text.insert(90, "नब्बे ");
    text.insert(91, "इक्यानवे");
    text.insert(92, "बानवे");
    text.insert(93, "तिरानवे");
    text.insert(94, "चौरानवे");
    text.insert(95, "पचानवे");
    text.insert(96, "छियानवे");
    text.insert(97, "सतानवे");
    text.insert(98, "अट्ठानवे");
    text.insert(99, "निन्यानवे");
    text.insert(100, "एकसौ");
    let mut wordstr = String::new();
    wordstr.push_str(text.get(&digits).unwrap());
    return wordstr;
}
fn hashmap_hindi2(a: i32) -> String {
    let mut output = String::new();
    let mut len = lenght(a);
    println!("{}", len);
    while len > 0 {
        if len > 9 {
            output.push_str("No out of range ");
            len = 0;
        }
        if len == 8 || len == 9 {
            output.push_str(&hashmap_hindi(a / 10000000));
            if (a % 1000000000) / 100000000 != 0 || (a % 100000000) / 10000000 != 0 {
                output.push_str("करोड़ ");
            }
            len = 7;
        }
        if len == 6 || len == 7 {
            if (a % 1_00_00_000) / 10_00_000 != 0 || (a % 10_00_000) / 1_00_000 != 0 {
                output.push_str(&hashmap_hindi((a / 100000) - (a / 10000000) * 100));
                output.push_str("लाख ");
            }
            len = 5;
        }
        if len == 5 || len == 4 {
            if (a % 100000) / 10000 != 0 || (a % 10000) / 1000 != 0 {
                output.push_str(&hashmap_hindi((a / 1000) - (a / 100000) * 100));

                output.push_str("हजार ");
            }
            len = 3;
        }
        if len == 3 {
            if (a % 1000) / 100 != 0 {
                output.push_str(&hashmap_hindi((a % 1000) / 100));

                output.push_str("सौ ");
            }
            len = 2
        }
        if len == 2 || len==1{
            output.push_str(&hashmap_hindi(a % 100));

            len = 0;
        }
    }
    output
}
fn hashmap_bengali(a: i32) -> String {
    let mut text: HashMap<i32, &str> = HashMap::new();
    text.insert(0, "");
    text.insert(1, "এক ");
    text.insert(2, "দুই ");
    text.insert(3, "তিন ");
    text.insert(4, "চার ");
    text.insert(5, "পাঁচ ");
    text.insert(6, "ছয় ");
    text.insert(7, "সাত ");
    text.insert(8, "আট ");
    text.insert(9, "নয় ");
    text.insert(10, "দশ ");
    text.insert(11, "এগারো ");
    text.insert(12, "বারো ");
    text.insert(13, "তেরো ");
    text.insert(14, "চোদ্দো ");
    text.insert(15, "পনেরো ");
    text.insert(16, "ষোলো ");
    text.insert(17, "সতেরো ");
    text.insert(18, "আঠারো ");
    text.insert(19, "উনিশ ");
    text.insert(20, "বিশ ");
    text.insert(21, "একুশ ");
    text.insert(22, "বাইশ ");
    text.insert(23, "তেইশ ");
    text.insert(24, "চব্বিশ ");
    text.insert(25, "পঁচিশ ");
    text.insert(26, "ছাব্বিশ ");
    text.insert(27, "সাতাশ ");
    text.insert(28, "আটাশ");
    text.insert(29, "ঊনত্রিশ");
    text.insert(30, "ত্রিশ");
    text.insert(31, "একত্রিশ ");
    text.insert(32, "বত্রিশ ");
    text.insert(33, "তেত্রিশ ");
    text.insert(34, "চৌত্রিশ ");
    text.insert(35, "পৈন্তীরিশ ");
    text.insert(36, "ছোতিরিশ ");
    text.insert(37, "সাইত্রিশ ");
    text.insert(38, "আটত্রিশ  ");
    text.insert(39, "ঊনচল্লিশ ");
    text.insert(40, "চল্লিশ ");
    text.insert(41, "একচল্লিশ ");
    text.insert(42, "বিয়াল্লিশ ");
    text.insert(43, "তেতাল্লিশ ");
    text.insert(44, "চুয়াল্লিশ ");
    text.insert(45, "পঁয়তাল্লিশ ");
    text.insert(46, "ছিচল্লিশ ");
    text.insert(47, "সাতচল্লিশ ");
    text.insert(48, "আটচল্লিশ ");
    text.insert(49, "ঊনপঞ্চাশ ");
    text.insert(50, "পঞ্চাশ ");
    text.insert(51, "একান্নো ");
    text.insert(52, "বাহান্নো ");
    text.insert(53, "তেপ্পান্নো ");
    text.insert(54, "চুযান্নো ");
    text.insert(55, "পঞ্চান্নো ");
    text.insert(56, "ছাপ্পান্নো ");
    text.insert(57, "সাতান্নো ");
    text.insert(58, "আটান্নো ");
    text.insert(59, "ঊনষাট ");
    text.insert(60, "ষাট ");
    text.insert(61, "একষট্টি ");
    text.insert(62, "বাষট্টি ");
    text.insert(63, "তেষট্টি");
    text.insert(64, "চৌষট্টি");
    text.insert(65, "পৈন্ষট্টি ");
    text.insert(66, "ছেষট্টি ");
    text.insert(67, "সাতষট্টি ");
    text.insert(68, "আটষট্টি ");
    text.insert(69, "উনসত্তর ");
    text.insert(70, "সত্তর ");
    text.insert(71, "একাত্তর ");
    text.insert(72, "বাহাত্তর ");
    text.insert(73, "তেহাত্তর ");
    text.insert(74, "চহত্তর ");
    text.insert(75, "পচাত্তর ");
    text.insert(76, "ছিয়াত্তর ");
    text.insert(77, "সাতাত্তর ");
    text.insert(78, "আটাত্তর ");
    text.insert(79, "উনাশি ");
    text.insert(80, "আশি ");
    text.insert(81, "একাশি ");
    text.insert(82, "বিরাশি ");
    text.insert(83, "তিরাশি ");
    text.insert(84, "চুরাশি ");
    text.insert(85, "পঁচাশি ");
    text.insert(86, "ছিয়াশি ");
    text.insert(87, "সাতাশি ");
    text.insert(88, "আটাশি ");
    text.insert(89, "ঊনোনব্বই ");
    text.insert(90, "নব্বুই ");
    text.insert(91, "একানব্বই ");
    text.insert(92, "বিরানব্বই ");
    text.insert(93, "তিরানব্বই ");
    text.insert(94, "চুরানব্বই ");
    text.insert(95, "পঁচানব্বই ");
    text.insert(96, "ছিয়ানব্বই ");
    text.insert(97, "সাতানব্বই ");
    text.insert(98, "আটানব্বই ");
    text.insert(99, "নিরানব্বই ");
    text.insert(100, "একশো ");
    let mut stri = String::new();
    stri.push_str(text.get(&a).unwrap());
    return stri;
}
fn hashmap_bengali2(a: i32) -> String {
    let mut output = String::new();
    let mut len = lenght(a);
    println!("{}", len);
    while len > 0 {
        if len > 9 {
            output.push_str("No out of range ");
            len = 0;
        }
        if len == 8 || len == 9 {
            output.push_str(&hashmap_bengali(a / 10000000));
            if (a % 1000000000) / 100000000 != 0 || (a % 100000000) / 10000000 != 0 {
                output.push_str("কোটি ");
            }
            len = 7;
        }
        if len == 6 || len == 7 {
            if (a % 1_00_00_000) / 10_00_000 != 0 || (a % 10_00_000) / 1_00_000 != 0 {
                output.push_str(&hashmap_bengali((a / 100000) - (a / 10000000) * 100));
                output.push_str("লক্ষ  ");
            }
            len = 5;
        }
        if len == 5 || len == 4 {
            if (a % 100000) / 10000 != 0 || (a % 10000) / 1000 != 0 {
                output.push_str(&hashmap_bengali((a / 1000) - (a / 100000) * 100));

                output.push_str("হাজার ");
            }
            len = 3;
        }
        if len == 3 {
            if (a % 1000) / 100 != 0 {
                output.push_str(&hashmap_bengali((a % 1000) / 100));

                output.push_str("শো ");
            }
            len = 2
        }
        if len == 2 || len==1{
            output.push_str(&hashmap_bengali(a % 100));

            len = 0;
        }
    }
    output
}
fn hashmap_gujrati(digits: i32) -> String {
    let mut text: HashMap<i32, &str> = HashMap::new();
    text.insert(0, " ");
    text.insert(1, "એક ");
    text.insert(2, "બે  ");
    text.insert(3, "ત્રણ ");
    text.insert(4, "ચાર ");
    text.insert(5, "પાંચ ");
    text.insert(6, "છ ");
    text.insert(7, "સાત ");
    text.insert(8, "આઠ  ");
    text.insert(9, "નવ ");
    text.insert(10, "દસ ");
    text.insert(11, "અગિયાર ");
    text.insert(12, "બાર ");
    text.insert(13, "તેર ");
    text.insert(14, "ચૌદ ");
    text.insert(15, "પંદર ");
    text.insert(16, "સોળ ");
    text.insert(17, "સત્તર ");
    text.insert(18, "અઢાર ");
    text.insert(19, "ઓગણિસ ");
    text.insert(20, "વીસ ");
    text.insert(21, "એકવીસ ");
    text.insert(22, "બાવીસ ");
    text.insert(23, "તેવીસ ");
    text.insert(24, "ચોવીસ ");
    text.insert(25, "પચ્ચીસ ");
    text.insert(26, "છવીસ ");
    text.insert(27, "સત્તાવીસ ");
    text.insert(28, "અઠ્ઠાવીસ");
    text.insert(29, "ઓગણત્રીસ");
    text.insert(30, "ત્રીસ");
    text.insert(31, "એકત્રીસ ");
    text.insert(32, "બત્રીસ ");
    text.insert(33, "તેત્રીસ ");
    text.insert(34, "ચોત્રીસ ");
    text.insert(35, "પાંત્રીસ ");
    text.insert(36, "છત્રીસ ");
    text.insert(37, "સડત્રીસ ");
    text.insert(38, "અડત્રીસ  ");
    text.insert(39, "ઓગણચાલીસ ");
    text.insert(40, "ચાલીસ ");
    text.insert(41, "એકતાલીસ ");
    text.insert(42, "બેતાલીસ     ");
    text.insert(43, "ત્રેતાલીસ ");
    text.insert(44, "ચુંમાલીસ ");
    text.insert(45, "પિસ્તાલીસ ");
    text.insert(46, "છેતાલીસ ");
    text.insert(47, "સુડતાલીસ ");
    text.insert(48, "અડતાલીસ ");
    text.insert(49, "ઓગણપચાસ ");
    text.insert(50, "પચાસ    ");
    text.insert(51, "એકાવન ");
    text.insert(52, "બાવન ");
    text.insert(53, "ત્રેપન ");
    text.insert(54, "ચોપન ");
    text.insert(55, "પંચાવન ");
    text.insert(56, "છપ્પન ");
    text.insert(57, "સત્તાવન ");
    text.insert(58, "અઠ્ઠાવન ");
    text.insert(59, "ઓગણસાઠ ");
    text.insert(60, "સાઈઠ ");
    text.insert(61, "એકસઠ ");
    text.insert(62, "બાસઠ");
    text.insert(63, "ત્રેસઠ ");
    text.insert(64, "ચોસઠ  ");
    text.insert(65, "પાંસઠ ");
    text.insert(66, "છાસઠ ");
    text.insert(67, "સડસઠ ");
    text.insert(68, "અડસઠ ");
    text.insert(69, "અગણોસિત્તેર ");
    text.insert(70, "સિત્તેર ");
    text.insert(71, "એકોતેર ");
    text.insert(72, "બોતેર ");
    text.insert(73, "તોતેર ");
    text.insert(74, "ચુમોતેર ");
    text.insert(75, "પંચોતેર ");
    text.insert(76, "છોતેર ");
    text.insert(77, "સિત્યોતેર ");
    text.insert(78, "ઇઠ્યોતેર ");
    text.insert(79, "ઓગણાએંસી ");
    text.insert(80, "એંસી ");
    text.insert(81, "એક્યાસી ");
    text.insert(82, "બ્યાસી ");
    text.insert(83, "ત્યાસી ");
    text.insert(84, "ચોર્યાસી ");
    text.insert(85, "પંચાસી ");
    text.insert(86, "છ્યાસી ");
    text.insert(87, "સિત્યાસી ");
    text.insert(88, "ઈઠ્યાસી ");
    text.insert(89, "નેવ્યાસી ");
    text.insert(90, "નેવું ");
    text.insert(91, "એકાણું ");
    text.insert(92, "બાણું ");
    text.insert(93, "ત્રાણું ");
    text.insert(94, "ચોરાણું ");
    text.insert(95, "પંચાણું ");
    text.insert(96, "છન્નું");
    text.insert(97, "સત્તાણું ");
    text.insert(98, "અઠ્ઠાણું ");
    text.insert(99, "નવ્વાણું ");
    text.insert(100, "સો ");
    let mut wordstr = String::new();
    wordstr.push_str(text.get(&digits).unwrap());
    return wordstr;
}
fn hashmap_gujrati2(a: i32) -> String {
    let mut output = String::new();
    let mut len = lenght(a);
    println!("{}", len);
    while len > 0 {
        if len > 9 {
            output.push_str("No out of range ");
            len = 0;
        }
        if len == 8 || len == 9 {
            output.push_str(&hashmap_gujrati(a / 10000000));
            if (a % 1000000000) / 100000000 != 0 || (a % 100000000) / 10000000 != 0 {
                output.push_str("કરોડ઼ ");
            }
            len = 7;
        }
        if len == 6 || len == 7 {
            if (a % 1_00_00_000) / 10_00_000 != 0 || (a % 10_00_000) / 1_00_000 != 0 {
                output.push_str(&hashmap_gujrati((a / 100000) - (a / 10000000) * 100));
                output.push_str("લાખ ");
            }
            len = 5;
        }
        if len == 5 || len == 4 {
            if (a % 100000) / 10000 != 0 || (a % 10000) / 1000 != 0 {
                output.push_str(&hashmap_gujrati((a / 1000) - (a / 100000) * 100));

                output.push_str("હજાર ");
            }
            len = 3;
        }
        if len == 3 {
            if (a % 1000) / 100 != 0 {
                output.push_str(&hashmap_hindi((a % 1000) / 100));

                output.push_str("સો ");
            }
            len = 2
        }
        if len == 2 || len==1{
            output.push_str(&hashmap_gujrati(a % 100));
            len = 0;
        }
    }
    output
}
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_case1() {
        assert_eq!(hashmap_english2(98), "ninety eight ");
    }
    #[test]
    fn test_case2() {
        assert_eq!(hashmap_english2(9), "nine ");
    }
    #[test]
    fn test_case3() {
        assert_eq!(hashmap_english3(316), "three hundred sixteen ");
    }
    #[test]
    fn test_case4() {
        assert_eq!(
            hashmap_english3(3168),
            "three thousand One hundred sixty eight "
        );
    }
    #[test]
    fn test_case5() {
        assert_eq!(
            hashmap_english3(31698),
            "thirty One thousand six hundred ninety eight "
        );
    }
    #[test]
    fn test_case6() {
        assert_eq!(hashmap_english3(100000), "One lakh ");
    }
    #[test]
    fn test_case7() {
        assert_eq!(
            hashmap_english3(1023456),
            "ten lakh twenty three thousand four hundred fifty six "
        );
    }
    #[test]
    fn test_case8() {
        assert_eq!(hashmap_english3(10000000), "One crore ");
    }
    #[test]
    fn test_case9() {
        assert_eq!(hashmap_english3(100000000), "ten crore ");
    }
    #[test]
    fn test_case10() {
        assert_eq!(hashmap_english3(1100000000), "No out of range ");
    }
    #[test]
    fn test_case11() {
        assert_eq!(hashmap_marathi2(98), "अठ्ठ्याण्णव");
    }
    #[test]
    fn test_case12() {
        assert_eq!(hashmap_marathi2(9), "नऊ ");
    }
    #[test]
    fn test_case13() {
        assert_eq!(hashmap_marathi2(316), "तीन शे सोळा ");
    }
    #[test]
    fn test_case14() {
        assert_eq!(
            hashmap_marathi2(3168),
            "तीन हजार एक शे अडुसष्ठ "
        );
    }
    #[test]
    fn test_case15() {
        assert_eq!(
            hashmap_marathi2(31698),
            "एकतीस हजार सहा शे अठ्ठ्याण्णव"
        );
    }
    #[test]
    fn test_case16() {
        assert_eq!(hashmap_marathi2(100000), "एक लाख ");
    }
    #[test]
    fn test_case17() {
        assert_eq!(
            hashmap_marathi2(1023456),
            "दहा लाख तेवीस हजार चार शे छप्पन्न "
        );
    }
    #[test]
    fn test_case18() {
        assert_eq!(hashmap_marathi2(10000000), "एक कोटी ");
    }
    #[test]
    fn test_case19() {
        assert_eq!(hashmap_marathi2(100000000), "दहा कोटी ");
    }
    #[test]
    fn test_case20() {
        assert_eq!(hashmap_marathi2(1100000000), "No out of range ");
    }
    #[test]
    fn test_case21() {
        assert_eq!(hashmap_bengali2(1), "এক ");
    }#[test]
    fn test_case22() {
        assert_eq!(hashmap_bengali2(45), "পঁয়তাল্লিশ ");
    }#[test]
    fn test_case23() {
        assert_eq!(hashmap_bengali2(456), "চার শো ছাপ্পান্নো ");
    }#[test]
    fn test_case24() {
        assert_eq!(hashmap_bengali2(4567), "চার হাজার পাঁচ শো সাতষট্টি ");
    }#[test]
    fn test_case25() {
        assert_eq!(hashmap_bengali2(45678), "পঁয়তাল্লিশ হাজার ছয় শো আটাত্তর ");
    }#[test]
    fn test_case26() {
        assert_eq!(hashmap_bengali2(456789), "চার লক্ষ  ছাপ্পান্নো হাজার সাত শো ঊনোনব্বই ");
    }#[test]
    fn test_case27() {
        assert_eq!(hashmap_bengali2(4567890), "পঁয়তাল্লিশ লক্ষ  সাতষট্টি হাজার আট শো নব্বুই ");
    }#[test]
    fn test_case28() {
        assert_eq!(hashmap_bengali2(45678901), "চার কোটি ছাপ্পান্নো লক্ষ  আটাত্তর হাজার নয় শো এক ");
    }#[test]
    fn test_case29() {
        assert_eq!(hashmap_bengali2(456789012), "পঁয়তাল্লিশ কোটি সাতষট্টি লক্ষ  ঊনোনব্বই হাজার বারো ");
    }#[test]
    fn test_case30() {
        assert_eq!(hashmap_bengali2(1100000000), "No out of range ");
    }#[test]
    fn test_case31() {
        assert_eq!(hashmap_hindi2(6), "छह ");
    }#[test]
    fn test_case32() {
        assert_eq!(hashmap_hindi2(67), "सड़सठ ");
    }#[test]
    fn test_case33() {
        assert_eq!(hashmap_hindi2(678), "छह सौ अठहतर ");
    }#[test]
    fn test_case34() {
        assert_eq!(hashmap_hindi2(6789), "छह हजार सात सौ नवासी ");
    }#[test]
    fn test_case35() {
        assert_eq!(hashmap_hindi2(67890), "सड़सठ हजार आठ  सौ नब्बे ");
    }#[test]
    fn test_case36() {
        assert_eq!(hashmap_hindi2(678901), "छह लाख अठहतर हजार नौ सौ एक ");
    }#[test]
    fn test_case37() {
        assert_eq!(hashmap_hindi2(6789012), "सड़सठ लाख नवासी हजार बारह ");
    }#[test]
    fn test_case38() {
        assert_eq!(hashmap_hindi2(67890123), "छह करोड़ अठहतर लाख नब्बे हजार एक सौ तेइस ");
    }#[test]
    fn test_case39() {
        assert_eq!(hashmap_hindi2(678901234), "सड़सठ करोड़ नवासी लाख एक हजार दो सौ चौंतीस ");
    }#[test]
    fn test_case40() {
        assert_eq!(hashmap_hindi2(1100000000), "No out of range ");
    }#[test]
    fn test_case41() {
        assert_eq!(hashmap_gujrati2(2), "બે  ");
    }#[test]
    fn test_case42() {
        assert_eq!(hashmap_gujrati2(23), "તેવીસ ");
    }
    #[test]
    fn test_case43() {
        assert_eq!(hashmap_gujrati2(234), "दो સો ચોત્રીસ ");
    }#[test]
    fn test_case44() {
        assert_eq!(hashmap_gujrati2(2345), "બે  હજાર तीन સો પિસ્તાલીસ ");
    }#[test]
    fn test_case45() {
        assert_eq!(hashmap_gujrati2(23456), "તેવીસ હજાર चार સો છપ્પન ");
    }#[test]
    fn test_case46() {
        assert_eq!(hashmap_gujrati2(234567), "બે  લાખ ચોત્રીસ હજાર पांच સો સડસઠ ");
    }#[test]
    fn test_case47() {
        assert_eq!(hashmap_gujrati2(2345678), "તેવીસ લાખ પિસ્તાલીસ હજાર छह સો ઇઠ્યોતેર ");
    }#[test]
    fn test_case48() {
        assert_eq!(hashmap_gujrati2(23456789), "બે  કરોડ઼ ચોત્રીસ લાખ છપ્પન હજાર सात સો નેવ્યાસી ");
    }#[test]
    fn test_case49() {
        assert_eq!(hashmap_gujrati2(234567890), "તેવીસ કરોડ઼ પિસ્તાલીસ લાખ સડસઠ હજાર आठ  સો નેવું ");
    }#[test]
    fn test_case50() {
        assert_eq!(hashmap_gujrati2(1100000000), "No out of range ");
    }
}